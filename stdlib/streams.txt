
(defun stream/new (generator initial-value)
  (delay
    (let ((next-pair (generator initial-value)))
      (if (= () next-pair)
        ()
        (list (car next-pair)
              (stream/new generator (cadr next-pair)))))))

(defun stream/car (s) (car (s)))

(defun stream/cdr (s) (cadr (s)))

(defun stream/empty? (s) (= (s) ()))

;----

(defun generate-ints-up-to-3 (n)
  (if (> n 3)
    ()
    (list n (+ n 1))))

(def ints-up-to-3-stream (stream/new generate-ints-up-to-3 1))

(let ((s ints-up-to-3-stream))
  (while (not (stream/empty? s))
    (print (stream/car s))
    (set! s (stream/cdr s))))
