(load "stdlib/list.txt")

(defmacro defstruct (name fields)

  (defun generate-constructor-name ()
    (text->symbol (text/concat "make-" (symbol->text name))))

  (defun generate-constructor ()
    `(defun ,(generate-constructor-name)
            ,fields
            (vector ',name ,@fields)))

  (defun generate-getter-name (field)
    (text->symbol (text/concat (symbol->text name) "-" (symbol->text field))))

  (defun generate-getter (field index)
    `(defun ,(generate-getter-name field) (self)
            (vector/get self ,index)))

  (defun generate-setter-name (field)
    (text->symbol (text/concat "set-" (symbol->text name) "-" (symbol->text field) "!")))

  (defun generate-setter (field index)
    `(defun ,(generate-setter-name field) (self value)
            (vector/set! self ,index value)))
  
  (defun generate-predicate-name ()
    (text->symbol (text/concat (symbol->text name) "?")))
  
  (defun generate-predicate ()
    `(defun ,(generate-predicate-name) (self)
       (and (= (type self) 'type/vector)
            (= (length self) ,(+ 1 (length fields)))
            (= (vector/get self 0) ',name))))
  
  `(do
     ,(generate-constructor)
     ,@(list/map-with-index generate-getter 1 fields)
     ,@(list/map-with-index generate-setter 1 fields)
     ,(generate-predicate)
   ))

(defstruct point (x y))
(def p (make-point 1 2))
(point-x p)
(point-y p)
(set-point-x! p 2)
(set-point-y! p 1)
(point? p)
