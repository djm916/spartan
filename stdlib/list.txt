
(defun list/map (f xs)
  (if (empty? xs) () 
    (cons (f (car xs)) (list/map f (cdr xs)))))

(defun list/map-with-index (f i xs)
  (if (empty? xs) () 
    (cons (f (car xs) i) (list/map-with-index f (+ 1 i) (cdr xs)))))

(defun list/filter (f xs)
  (if (empty? xs) ()
    (if (f (car xs))
      (cons (car xs) (list/filter f (cdr xs)))
      (list/filter f (cdr xs)))))

; Reduce a list to a single value

; Inputs:
;   f     a binary function
;   xs:   a list of elements x1 x2 ... xN
;   i:    an inital value
    
; For example, a 3 element list reduces as:
;
;   (f (f (f i x1) x2) x3)

(defun list/fold-left (f i xs)
  (if (empty? xs) i
    (list/fold-left f (f i (car xs)) (cdr xs))))

; Reduce a list to a single value

; Inputs:
;   f     a binary function
;   xs:   a list of elements x1 x2 ... xN
;   i:    an inital value
    
; For example, a 3 element list reduces as:
;
;   (f x1 (f x2 (f x3 i)))

(defun list/fold-right (f i xs)
  (if (empty? xs) i
    (f (car xs) (list/fold-right f i (cdr xs)))))
  
(defun list/range (i j)
  (if (> i j) ()
    (cons i (list/range (+ 1 i) j))))

(defun list/reverse (xs)
  (defun loop (xs sx)
    (if (empty? xs) sx
      (loop (cdr xs) (cons (car xs) sx))))
  (loop xs ()))

(defun list/enumerate (xs i)
  (if (empty? xs) ()
    (cons (list i (car xs))
          (list/enumerate (cdr xs) (+ 1 i)))))

(defun list/take (n xs)
  (if (= 0 n) ()
    (cons (car xs) (list/take (- n 1) (cdr xs)))))

(defun list/take-while (f xs)
  (if (empty? xs) ()
    (if (f (car xs))
      (cons (car xs) (list/take-while f (cdr xs)))
      ())))

(defun list/drop (n xs)
  (if (= 0 n) xs
    (list/drop (- n 1) (cdr xs))))

(defun list/drop-while (f xs)
  (if (empty? xs) xs
    (if (f (car xs))
      (list/drop-while f (cdr xs))
      xs)))

(defun list/zip (f xs ys)
  (if (or (empty? xs) (empty? ys)) ()
    (cons (f (car xs) (car ys))
          (list/zip f (cdr xs) (cdr ys)))))
