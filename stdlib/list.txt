
(defun list/map (f xs)
  (if (empty? xs) () 
    (cons (f (car xs)) (list/map f (cdr xs)))))

(defun list/filter (f xs)
  (if (empty? xs) ()
    (if (f (car xs))
      (cons (car xs) (list/filter f (cdr xs)))
      (list/filter f (cdr xs)))))

(defun list/fold (f xs i)
  (if (empty? xs) i
    (list/fold f (cdr xs) (f (car xs) i))))

(defun list/range (i j)
  (if (> i j) ()
    (cons i (list/range (+ 1 i) j))))

(defun list/reverse (xs)
  (letrec ((loop (fun (xs sx)
                   (if (empty? xs) sx
                     (loop (cdr xs) (cons (car xs) sx))))))
    (loop xs ())))

(defun list/enum (xs i)
  (if (empty? xs) ()
    (cons (list i (car xs)) (list/enum (cdr xs) (+ 1 i)))))
    
; ---

(defun square (x) (* x x))

(list/map square (list/range 1 10))

(defun even? (x) (= 0 (% x 2)))

(list/filter even? (list/range 1 10))

; 0 + 1 + ... + 10 = 55
(list/fold + (list/range 1 10) 0)

; 0 - 1 - 2 - ... - 10
(list/fold - (list/range 1 10) 0)

; !6 = 720
(list/fold * (list/range 1 6) 1)

; (10, 9, 8, ... 1)
(list/reverse (list/range 1 10))
