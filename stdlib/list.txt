
(defun list/map (transformer list)
  (if (= list ())
    ()
    (cons (transformer (car list)) (list/map transformer (cdr list)))))

(defun list/filter (predicate list)
  (if (= list ())
    ()
    (if (predicate (car list))
      (cons (car list) (list/filter predicate (cdr list)))
      (list/filter predicate (cdr list)))))

(defun list/fold (combiner list initial-value)
  (if (= list ())
    initial-value
    (list/fold combiner
               (cdr list)
               (combiner initial-value (car list)))))

(defun list/range (from to)
  (if (> from to)
    ()
    (cons from (list/range (+ 1 from) to))))

(defun list/reverse (list)
  (letrec ((loop (fun (list result)
                   (if (= list ())
                     result
                     (loop (cdr list) (cons (car list) result))))))
    (loop list ())))

; ---

(defun square (x) (* x x))

(list/map square (list/range 1 10))

(defun even? (x) (= 0 (% x 2)))

(list/filter even? (list/range 1 10))

; 0 + 1 + ... + 10 = 55
(list/fold + (list/range 1 10) 0)

; 0 - 1 - 2 - ... - 10
(list/fold - (list/range 1 10) 0)

; !6 = 720
(list/fold * (list/range 1 6) 1)

